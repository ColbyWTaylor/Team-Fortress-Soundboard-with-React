{"version":3,"sources":["pyro_taunts01.wav","demoman_taunts01.wav","engineer_taunts01.wav","heavy_taunts01.wav","medic_taunts01.wav","scout_taunts01.wav","sniper_taunts01.wav","soldier_taunts01.wav","spy_taunts01.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","pyro_taunts01","currentSelection","setCurrentSelection","loop","autoPlay","cardMap","name","url","image","sound","scout_taunts01","combatType","rating","soldier_taunts01","demoman_taunts01","heavy_taunts01","engineer_taunts01","medic_taunts01","spy_taunts01","sniper_taunts01","map","item","index","backgroundImage","className","key","id","onClick","e","console","log","updateThing","style","backgroundColor","width","margin","controls","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,2C,kBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,yTCiK5BC,MAlJf,WAEE,IAFa,EAQmCC,mBAASC,KAR5C,mBAQNC,EARM,KAQYC,EARZ,OASWH,oBAAS,GATpB,mBASNI,EATM,aAUmBJ,oBAAS,IAV5B,mBAUNK,EAVM,KAiGTC,GAjGS,KAqBD,CACZ,CACEC,KAAM,QACNC,IAAK,WACLC,MAAO,uBACPC,MAAOC,IACPC,WAAY,UACZC,OAAQ,GAEV,CACEN,KAAM,UACNC,IAAK,WACLC,MAAO,4DACPC,MAAOI,IACPF,WAAY,UACZC,OAAQ,GAEV,CACEN,KAAM,OACNC,IAAK,WACLC,MAAO,0BACPC,MAAOT,IACPW,WAAY,UACZC,OAAO,GAET,CACEN,KAAM,UACNC,IAAK,YACLC,MAAO,yBACPC,MAAOK,IACPH,WAAY,UACZC,OAAO,GAET,CACEN,KAAM,QACNC,IAAK,WACLC,MAAO,4CACPC,MAAOM,IACPJ,WAAY,UACZC,OAAO,GAET,CACEN,KAAM,WACNC,IAAK,WACLC,MAAO,4CACPC,MAAOO,IACPL,WAAY,UACZC,OAAO,GAET,CACEN,KAAM,QACNC,IAAK,WACLC,MAAO,4CACPC,MAAOQ,IACPN,WAAY,UACZC,OAAO,GAET,CACEN,KAAM,MACNC,IAAK,WACLC,MAAO,mBACPC,MAAOS,IACPP,WAAY,UACZC,OAAO,GAET,CACEN,KAAM,SACNC,IAAK,WACLC,MAAO,mBACPC,MAAOU,IACPR,WAAY,UACZC,OAAO,IAKWQ,KAAI,SAACC,EAAMC,GAAP,OAC1B,oCACM,yBAAKC,gBAAiB,WAAaF,EAAKb,MAAOgB,UAAW,OAAQC,IAAKJ,EAAKK,GAAIC,QAAS,SAAAC,IAvFzE,SAACA,GACnB1B,EAAoB0B,GACpBC,QAAQC,IAAIF,GAqFmFG,CAAYV,EAAKZ,SAC5G,4BAAKY,EAAKf,MACV,4BAAKe,EAAKV,kBAYhB,OACE,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,sDAGN,yBAAKA,UAAU,gBAAgBQ,MArHrB,CACRC,gBAAiB,MACjBC,MAAO,MACPC,OAAQ,aAqHN,2BACAC,UAAQ,EACRjC,KAAMA,EACNC,SAAUA,EACViC,IAAKpC,GAJL,oCAME,uCANF,cAWA,6BACOI,MCzIOiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.bfcb6d6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pyro_taunts01.bba845c1.wav\";","module.exports = __webpack_public_path__ + \"static/media/demoman_taunts01.d6f6dd02.wav\";","module.exports = __webpack_public_path__ + \"static/media/engineer_taunts01.5779c12f.wav\";","module.exports = __webpack_public_path__ + \"static/media/heavy_taunts01.47012018.wav\";","module.exports = __webpack_public_path__ + \"static/media/medic_taunts01.f506f779.wav\";","module.exports = __webpack_public_path__ + \"static/media/scout_taunts01.ff6ab53d.wav\";","module.exports = __webpack_public_path__ + \"static/media/sniper_taunts01.aa1c5d9c.wav\";","module.exports = __webpack_public_path__ + \"static/media/soldier_taunts01.fed4a8ee.wav\";","module.exports = __webpack_public_path__ + \"static/media/spy_taunts01.eb23835c.wav\";","import React, {useState} from 'react';\n// import logo from './logo.svg';\n// import artofwar from './The_Art_of_War.mp3';\nimport demoman_taunts01 from './demoman_taunts01.wav';\nimport engineer_taunts01 from './engineer_taunts01.wav';\nimport heavy_taunts01 from './heavy_taunts01.wav';\nimport pyro_taunts01 from './pyro_taunts01.wav';\nimport medic_taunts01 from './medic_taunts01.wav';\nimport scout_taunts01 from './scout_taunts01.wav';\nimport sniper_taunts01 from './sniper_taunts01.wav';\nimport soldier_taunts01 from './soldier_taunts01.wav';\nimport spy_taunts01 from './spy_taunts01.wav';\n\nimport './App.css';\n\nfunction App() {\n\n  let style={\n    backgroundColor: 'red',\n    width: \"98%\",\n    margin: \"auto 0px\"\n  }\n  \n  const [currentSelection, setCurrentSelection] = useState(pyro_taunts01)\n  const [loop, setLoop] = useState(false)\n  const [autoPlay, setAutoPlay] = useState(true)\n  \n  const updateThing = (e) => {\n    setCurrentSelection(e)\n    console.log(e)\n  }\n\n  const audio = \"https://vgmdownloads.com/soundtracks/team-fortress-2/nblhnelm/01%20Team%20Fortress%202.wav\"\n  // let tf2SoundLinkToALLDONOTUSETHISVARIABLE = \"https://downloads.khinsider.com/game-soundtracks/album/team-fortress-2\"\n\n\n  let cards = [\n  {\n    name: \"Scout\",\n    url: \"whatever\",\n    image: \"Scout_Full_Body.webp\",\n    sound: scout_taunts01,\n    combatType: \"Offense\",\n    rating: 4\n  },\n  {\n    name: \"Soldier\",\n    url: \"whatever\",\n    image: \"steamworkshop_webupload_previewfile_303416258_preview.png\",\n    sound: soldier_taunts01,\n    combatType: \"Offense\",\n    rating: 2\n  },\n  {\n    name: \"Pyro\",\n    url: \"whatever\",\n    image: \"250px-Pyr'o_Lantern.png\",\n    sound: pyro_taunts01,\n    combatType: \"Offense\",\n    rating:5\n  },\n  {\n    name: \"Demoman\",\n    url: \"something\",\n    image: \"187px-Pirate_promo.png\",\n    sound: demoman_taunts01,\n    combatType: \"Defense\",\n    rating:5\n  },\n  {\n    name: \"Heavy\",\n    url: \"whatever\",\n    image: \"300px-Community_Heavy_Strategy_Header.png\",\n    sound: heavy_taunts01,\n    combatType: \"Defense\",\n    rating:5\n  },\n  {\n    name: \"Engineer\",\n    url: \"whatever\",\n    image: \"300px-Community_Heavy_Strategy_Header.png\",\n    sound: engineer_taunts01,\n    combatType: \"Support\",\n    rating:5\n  },\n  {\n    name: \"Medic\",\n    url: \"whatever\",\n    image: \"300px-Community_Medic_Strategy_Header.png\",\n    sound: medic_taunts01,\n    combatType: \"Support\",\n    rating:5\n  },\n  {\n    name: \"Spy\",\n    url: \"whatever\",\n    image: \"350px-Sniper.png\",\n    sound: spy_taunts01,\n    combatType: \"Support\",\n    rating:5\n  },\n  {\n    name: \"Sniper\",\n    url: \"whatever\",\n    image: \"350px-Sniper.png\",\n    sound: sniper_taunts01,\n    combatType: \"Support\",\n    rating:5\n  }\n]\n// const checkit = e => { console.log(e.sound)}\n\nconst cardMap = cards.map((item, index) =>\n<>\n      <div backgroundImage={\"/images/\" + item.image} className={\"card\"} key={item.id} onClick={e=>{updateThing(item.sound)}}>\n        <h2>{item.name}</h2>\n        <h3>{item.combatType}</h3>\n        {/* <img alt={\"\"} className={\"cardImages\"} src={\"/images/\" + item.image} /> */}\n        {/* <p>This will be some info</p> */}\n        {/* <p>{item.sound}</p> */}\n      </div>\n    </>)\n\n  // const cardMapFilter = cards.filter(thing=> thing.rating > 2).map(card=> {\n  //   return <p>{card.rating}</p>\n  // })\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Team Fortress 2 Taunts</h1>\n        {/* <p>Select and Click Play</p> */}\n  \n  <div className=\"player sticky\" style={style}>\n    {/* <p>Loop is {loop ? \"ON\" : \"OFF\"}</p> */}\n    {/* <p onClick={setLoop(false)}>set to false</p> */}\n      <audio\n      controls\n      loop={loop}\n      autoPlay={autoPlay}\n      src={currentSelection}>\n        Your browser does not support the\n        <code>audio</code> element.\n      </audio>\n\n\n  </div>\n      <div>\n            {cardMap}\n            {/* {cardMapFilter} */}\n      </div>\n      </header>\n\n\n      {/* <p onClick={e=> checkit(e.target.value)} value={\"asdfasdf\"}>asdfasdflkjkjhsdfg</p> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}